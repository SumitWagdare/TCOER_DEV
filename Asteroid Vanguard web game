<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Aetherium Vanguard - Arena</title>
    <link href="https://fonts.googleapis.com/css2?family=Orbitron:wght@400;700&display=swap" rel="stylesheet">
    <style>
        body {
            margin: 0;
            background-color: #0a0a0a;
            color: #fff;
            font-family: 'Orbitron', sans-serif;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            overflow: hidden;
        }
        .container {
            position: relative;
            border: 2px solid #00ffff;
            box-shadow: 0 0 35px #00ffff, inset 0 0 25px #00ffff44;
        }
        canvas {
            display: block;
            background-color: #000;
        }
        #ui-layer {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
            display: flex;
            flex-direction: column;
            justify-content: space-between;
            padding: 20px;
            box-sizing: border-box;
        }
        .ui-top, .ui-bottom {
            display: flex;
            justify-content: space-between;
            align-items: center;
            text-shadow: 0 0 10px #00ffff;
        }
        #score, #wave, #health-bar-container {
            font-size: 24px;
            font-weight: 700;
        }
        #health-bar-container {
            width: 300px;
            height: 25px;
            background-color: #ff005544;
            border: 2px solid #ff0055;
        }
        #health-bar {
            width: 100%;
            height: 100%;
            background-color: #ff0055;
            transition: width 0.2s ease-out;
        }
        #game-over-screen, #start-screen {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.8);
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            text-align: center;
        }
        h1 {
            font-size: 64px;
            color: #00ffff;
            text-shadow: 0 0 20px #00ffff;
            margin-bottom: 10px;
        }
        h2 {
            font-size: 32px;
            color: #ff0055;
        }
        p, .controls {
            font-size: 18px;
            color: #ccc;
            margin-top: 20px;
            line-height: 1.6;
        }
        .controls span {
            color: #fff;
            background-color: #00ffff44;
            padding: 2px 8px;
            border-radius: 4px;
        }
        button {
            margin-top: 30px;
            padding: 15px 30px;
            font-family: 'Orbitron', sans-serif;
            font-size: 24px;
            font-weight: 700;
            color: #000;
            background-color: #00ffff;
            border: none;
            cursor: pointer;
            text-shadow: 0 0 5px #000;
            box-shadow: 0 0 20px #00ffff;
            transition: all 0.2s ease-in-out;
        }
        button:hover {
            transform: scale(1.05);
            box-shadow: 0 0 30px #00ffff, 0 0 10px #fff;
        }
    </style>
</head>
<body>
    <div class="container">
        <canvas id="gameCanvas"></canvas>
        <div id="ui-layer">
            <div class="ui-top">
                <div id="score">SCORE: 0</div>
                <div id="wave">WAVE: 1</div>
            </div>
            <div class="ui-bottom">
                 <div id="health-bar-container">
                    <div id="health-bar"></div>
                </div>
            </div>
        </div>
        <div id="start-screen">
            <h1>AETHERIUM VANGUARD</h1>
            <p>The arena awaits. Eliminate the rogue drones.</p>
            <div class="controls">
                <span>W,A,S,D</span> to Move | <span>MOUSE</span> to Aim | <span>CLICK</span> to Shoot | <span>SPACE</span> to Dash
            </div>
            <button id="startButton">START GAME</button>
        </div>
        <div id="game-over-screen" style="display: none;">
            <h2 id="final-wave"></h2>
            <h1>GAME OVER</h1>
            <p id="final-score"></p>
            <button id="restartButton">RESTART</button>
        </div>
    </div>

    <script>
        const canvas = document.getElementById('gameCanvas');
        const ctx = canvas.getContext('2d');
        const startScreen = document.getElementById('start-screen');
        const gameOverScreen = document.getElementById('game-over-screen');
        const startButton = document.getElementById('startButton');
        const restartButton = document.getElementById('restartButton');
        const scoreEl = document.getElementById('score');
        const waveEl = document.getElementById('wave');
        const healthBar = document.getElementById('health-bar');
        const finalScoreEl = document.getElementById('final-score');
        const finalWaveEl = document.getElementById('final-wave');

        canvas.width = window.innerWidth * 0.9;
        canvas.height = window.innerHeight * 0.9;

        // --- Game State & Configuration ---
        let player, enemies, projectiles, particles, keys;
        let mouse = { x: 0, y: 0, down: false };
        let score = 0;
        let wave = 1;
        let gameActive = false;
        let screenShake = { intensity: 0, duration: 0 };
        
        const PLAYER_CONFIG = {
            size: 15,
            speed: 3,
            maxHealth: 100,
            dashSpeed: 12,
            dashCooldown: 1000 // 1 second
        };
        const ENEMY_CONFIG = {
            size: 20,
            speed: 1.5,
            health: 30,
            spawnRate: 3 // Base number of enemies per wave
        };
        const PROJECTILE_CONFIG = {
            size: 4,
            speed: 8,
            damage: 10
        };

        // --- Classes ---
        class Player {
            constructor() {
                this.x = canvas.width / 2;
                this.y = canvas.height / 2;
                this.size = PLAYER_CONFIG.size;
                this.speed = PLAYER_CONFIG.speed;
                this.health = PLAYER_CONFIG.maxHealth;
                this.angle = 0;
                this.canDash = true;
            }

            update() {
                // Rotation towards mouse
                this.angle = Math.atan2(mouse.y - this.y, mouse.x - this.x);

                // Movement
                if (keys['w']) this.y -= this.speed;
                if (keys['s']) this.y += this.speed;
                if (keys['a']) this.x -= this.speed;
                if (keys['d']) this.x += this.speed;
                
                // Dash
                if (keys[' '] && this.canDash) {
                    this.dash();
                }

                // Clamp to canvas bounds
                this.x = Math.max(this.size, Math.min(canvas.width - this.size, this.x));
                this.y = Math.max(this.size, Math.min(canvas.height - this.size, this.y));
            }
            
            dash() {
                this.canDash = false;
                const dashVector = { x: Math.cos(this.angle), y: Math.sin(this.angle) };
                this.x += dashVector.x * PLAYER_CONFIG.dashSpeed * 5;
                this.y += dashVector.y * PLAYER_CONFIG.dashSpeed * 5;
                
                // Create dash particles
                for (let i = 0; i < 20; i++) {
                    particles.push(new Particle(this.x, this.y, 3, '#00ffff', {
                        x: (Math.random() - 0.5) * 4,
                        y: (Math.random() - 0.5) * 4
                    }));
                }
                
                setTimeout(() => this.canDash = true, PLAYER_CONFIG.dashCooldown);
            }

            draw() {
                ctx.save();
                ctx.translate(this.x, this.y);
                ctx.rotate(this.angle);
                ctx.fillStyle = '#00ffff';
                ctx.shadowColor = '#00ffff';
                ctx.shadowBlur = 15;
                ctx.beginPath();
                ctx.moveTo(this.size, 0);
                ctx.lineTo(-this.size, -this.size * 0.8);
                ctx.lineTo(-this.size, this.size * 0.8);
                ctx.closePath();
                ctx.fill();
                ctx.restore();
                ctx.shadowBlur = 0; // Reset shadow blur
            }
            
            takeDamage(amount) {
                this.health -= amount;
                triggerScreenShake(5, 10);
                healthBar.style.width = `${(this.health / PLAYER_CONFIG.maxHealth) * 100}%`;
                if (this.health <= 0) {
                    gameOver();
                }
            }
        }

        class Enemy {
            constructor(x, y) {
                this.x = x;
                this.y = y;
                this.size = ENEMY_CONFIG.size;
                this.speed = ENEMY_CONFIG.speed + Math.random() * 0.5;
                this.health = ENEMY_CONFIG.health;
            }

            update() {
                const angle = Math.atan2(player.y - this.y, player.x - this.x);
                this.x += Math.cos(angle) * this.speed;
                this.y += Math.sin(angle) * this.speed;
            }

            draw() {
                ctx.fillStyle = '#ff0055';
                ctx.shadowColor = '#ff0055';
                ctx.shadowBlur = 15;
                ctx.fillRect(this.x - this.size, this.y - this.size, this.size * 2, this.size * 2);
                ctx.shadowBlur = 0;
            }
            
            takeDamage(amount) {
                this.health -= amount;
                if (this.health <= 0) {
                    this.destroy();
                }
            }
            
            destroy() {
                score += 100;
                scoreEl.textContent = `SCORE: ${score}`;
                triggerScreenShake(8, 15);
                // Explosion particles
                for (let i = 0; i < 30; i++) {
                    particles.push(new Particle(this.x, this.y, Math.random() * 3 + 1, '#ff0055', {
                        x: (Math.random() - 0.5) * 8,
                        y: (Math.random() - 0.5) * 8
                    }));
                }
                const index = enemies.indexOf(this);
                if (index > -1) enemies.splice(index, 1);
            }
        }

        class Projectile {
            constructor(x, y, angle) {
                this.x = x;
                this.y = y;
                this.size = PROJECTILE_CONFIG.size;
                this.speed = PROJECTILE_CONFIG.speed;
                this.damage = PROJECTILE_CONFIG.damage;
                this.velocity = {
                    x: Math.cos(angle) * this.speed,
                    y: Math.sin(angle) * this.speed
                };
            }

            update() {
                this.x += this.velocity.x;
                this.y += this.velocity.y;
            }

            draw() {
                ctx.fillStyle = '#ffff00';
                ctx.shadowColor = '#ffff00';
                ctx.shadowBlur = 10;
                ctx.beginPath();
                ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);
                ctx.fill();
                ctx.shadowBlur = 0;
            }
        }
        
        class Particle {
            constructor(x, y, size, color, velocity) {
                this.x = x;
                this.y = y;
                this.size = size;
                this.color = color;
                this.velocity = velocity;
                this.alpha = 1;
            }

            update() {
                this.x += this.velocity.x;
                this.y += this.velocity.y;
                this.alpha -= 0.02;
            }

            draw() {
                ctx.save();
                ctx.globalAlpha = this.alpha;
                ctx.fillStyle = this.color;
                ctx.beginPath();
                ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);
                ctx.fill();
                ctx.restore();
            }
        }

        // --- Game Logic Functions ---
        function init() {
            player = new Player();
            enemies = [];
            projectiles = [];
            particles = [];
            keys = {};
            mouse = { x: canvas.width / 2, y: canvas.height / 2, down: false };
            score = 0;
            wave = 1;
            gameActive = true;

            scoreEl.textContent = `SCORE: 0`;
            waveEl.textContent = `WAVE: 1`;
            healthBar.style.width = `100%`;
            
            spawnWave();
        }

        function spawnWave() {
            waveEl.textContent = `WAVE: ${wave}`;
            const enemyCount = ENEMY_CONFIG.spawnRate + wave * 2;
            for (let i = 0; i < enemyCount; i++) {
                const x = Math.random() < 0.5 ? 0 - ENEMY_CONFIG.size : canvas.width + ENEMY_CONFIG.size;
                const y = Math.random() * canvas.height;
                enemies.push(new Enemy(x, y));
            }
        }

        function triggerScreenShake(intensity, duration) {
            screenShake.intensity = intensity;
            screenShake.duration = duration;
        }

        function handleCollisions() {
            // Projectiles vs Enemies
            projectiles.forEach((proj, pIndex) => {
                enemies.forEach((enemy) => {
                    const dist = Math.hypot(proj.x - enemy.x, proj.y - enemy.y);
                    if (dist - enemy.size - proj.size < 1) {
                        enemy.takeDamage(proj.damage);
                        projectiles.splice(pIndex, 1);
                    }
                });
            });

            // Enemies vs Player
            enemies.forEach((enemy) => {
                const dist = Math.hypot(player.x - enemy.x, player.y - enemy.y);
                if (dist - enemy.size - player.size < 1) {
                    player.takeDamage(10);
                    enemy.destroy();
                }
            });
        }
        
        function gameOver() {
            gameActive = false;
            finalScoreEl.textContent = `FINAL SCORE: ${score}`;
            finalWaveEl.textContent = `YOU REACHED WAVE ${wave}`;
            gameOverScreen.style.display = 'flex';
        }

        // --- Main Game Loop ---
        function animate() {
            if (!gameActive) return;
            requestAnimationFrame(animate);

            ctx.clearRect(0, 0, canvas.width, canvas.height);
            
            // Apply screen shake
            if (screenShake.duration > 0) {
                ctx.save();
                const dx = (Math.random() - 0.5) * screenShake.intensity;
                const dy = (Math.random() - 0.5) * screenShake.intensity;
                ctx.translate(dx, dy);
                screenShake.duration--;
            }

            // Update & Draw everything
            particles.forEach((p, index) => {
                if (p.alpha <= 0) particles.splice(index, 1);
                else { p.update(); p.draw(); }
            });
            
            projectiles.forEach((p, index) => {
                if (p.x < 0 || p.x > canvas.width || p.y < 0 || p.y > canvas.height) {
                    projectiles.splice(index, 1);
                } else {
                    p.update();
                    p.draw();
                }
            });

            player.update();
            player.draw();

            enemies.forEach(e => { e.update(); e.draw(); });
            
            handleCollisions();
            
            // Check for next wave
            if (enemies.length === 0) {
                wave++;
                spawnWave();
            }

            if (screenShake.duration > 0) {
                ctx.restore();
            }
        }

        // --- Event Listeners ---
        startButton.addEventListener('click', () => {
            startScreen.style.display = 'none';
            init();
            animate();
        });
        
        restartButton.addEventListener('click', () => {
            gameOverScreen.style.display = 'none';
            init();
            animate();
        });

        window.addEventListener('keydown', e => { keys[e.key.toLowerCase()] = true; });
        window.addEventListener('keyup', e => { keys[e.key.toLowerCase()] = false; });
        window.addEventListener('mousemove', e => {
            const rect = canvas.getBoundingClientRect();
            mouse.x = e.clientX - rect.left;
            mouse.y = e.clientY - rect.top;
        });
        
        let shootInterval;
        window.addEventListener('mousedown', () => {
            if (!gameActive) return;
            mouse.down = true;
            // Initial shot
            projectiles.push(new Projectile(player.x, player.y, player.angle));
            // Continuous fire
            if (!shootInterval) {
                shootInterval = setInterval(() => {
                    if(mouse.down && gameActive) {
                        projectiles.push(new Projectile(player.x, player.y, player.angle));
                    }
                }, 150); // Fire rate
            }
        });
        
        window.addEventListener('mouseup', () => {
            mouse.down = false;
            clearInterval(shootInterval);
            shootInterval = null;
        });
        
        window.addEventListener('resize', () => {
             canvas.width = window.innerWidth * 0.9;
             canvas.height = window.innerHeight * 0.9;
        });

    </script>
</body>
</html>

