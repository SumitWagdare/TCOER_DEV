<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AI Indian Art Generator</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&family=Playfair+Display:wght@700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #FFF8F0; /* Warm off-white background from the original design */
        }
        .font-playfair {
            font-family: 'Playfair Display', serif;
        }
        /* Simple spinner animation */
        .loader {
            border: 5px solid #f3f3f3; /* Light grey */
            border-top: 5px solid #a16207; /* Amber-800 */
            border-radius: 50%;
            width: 50px;
            height: 50px;
            animation: spin 1s linear infinite;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
    </style>
</head>
<body class="min-h-screen flex items-center justify-center p-4">

    <main class="w-full max-w-4xl bg-white rounded-2xl shadow-2xl p-8 md:p-12 grid grid-cols-1 lg:grid-cols-2 gap-8 md:gap-12 items-center">
        <!-- Left Side: Controls -->
        <div class="flex flex-col h-full">
            <div class="text-center lg:text-left">
                <h1 class="text-3xl md:text-4xl font-bold font-playfair text-amber-900">AI Art Studio</h1>
                <p class="text-gray-600 mt-2">Create unique art inspired by India's traditional styles. Describe your vision and let AI bring it to life.</p>
            </div>

            <div class="flex-grow mt-8 space-y-6">
                <!-- Step 1: Prompt -->
                <div>
                    <label for="prompt" class="block text-lg font-medium text-amber-800">1. Describe Your Vision</label>
                    <textarea id="prompt" rows="3" class="mt-2 block w-full rounded-md border-gray-300 shadow-sm focus:border-amber-500 focus:ring-amber-500 text-base p-3" placeholder="e.g., A royal Bengal tiger in a lush jungle, a woman playing a sitar under a banyan tree..."></textarea>
                </div>
                
                <!-- Step 2: Style Selection -->
                <div>
                    <label for="style" class="block text-lg font-medium text-amber-800">2. Choose an Art Style</label>
                    <select id="style" class="mt-2 block w-full rounded-md border-gray-300 shadow-sm focus:border-amber-500 focus:ring-amber-500 text-base p-3">
                        <option value="Madhubani painting">Madhubani</option>
                        <option value="Kalamkari art">Kalamkari</option>
                        <option value="Warli folk art">Warli</option>
                        <option value="Pattachitra style">Pattachitra</option>
                        <option value="Gond art">Gond</option>
                        <option value="Indian miniature painting">Miniature Painting</option>
                    </select>
                </div>
            </div>

            <!-- Generate Button -->
            <button id="generate-btn" class="w-full bg-amber-800 text-white font-bold py-3 px-4 rounded-lg hover:bg-amber-900 transition-colors duration-300 text-lg shadow-lg mt-8">
                Generate Art
            </button>
        </div>

        <!-- Right Side: Image Display -->
        <div id="image-container" class="w-full h-80 lg:h-full bg-amber-50 rounded-lg flex items-center justify-center border-2 border-dashed border-amber-300 relative overflow-hidden">
            <div id="loader" class="loader hidden"></div>
            <img id="generated-image" src="" alt="AI generated art" class="hidden w-full h-full object-contain transition-opacity duration-500">
            <div id="placeholder-text" class="text-amber-700 text-center p-4">
                <svg xmlns="http://www.w3.org/2000/svg" class="mx-auto h-12 w-12 text-amber-400" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" /></svg>
                <p class="mt-2 font-medium">Your generated art will appear here</p>
            </div>
             <p id="error-message" class="hidden text-red-600 font-medium p-4 text-center"></p>
        </div>
    </main>

    <script>
        const generateBtn = document.getElementById('generate-btn');
        const promptInput = document.getElementById('prompt');
        const styleSelect = document.getElementById('style');
        const imageContainer = document.getElementById('image-container');
        const loader = document.getElementById('loader');
        const generatedImage = document.getElementById('generated-image');
        const placeholderText = document.getElementById('placeholder-text');
        const errorMessage = document.getElementById('error-message');

        const apiKey = ""; // API key is handled by the environment, no need to add one.
        const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/imagen-3.0-generate-002:predict?key=${apiKey}`;

        // Function to handle API call with retries
        const generateImageWithRetry = async (finalPrompt, retries = 3, delay = 1000) => {
            for (let i = 0; i < retries; i++) {
                try {
                    const payload = {
                        instances: [{ prompt: finalPrompt }],
                        parameters: { "sampleCount": 1 }
                    };

                    const response = await fetch(apiUrl, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(payload)
                    });

                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }

                    const result = await response.json();

                    if (result.predictions && result.predictions.length > 0 && result.predictions[0].bytesBase64Encoded) {
                        return `data:image/png;base64,${result.predictions[0].bytesBase64Encoded}`;
                    } else {
                        // This case handles a successful request but empty/invalid response
                        throw new Error("Invalid response from API.");
                    }

                } catch (error) {
                    console.error(`Attempt ${i + 1} failed:`, error);
                    if (i === retries - 1) { // If it's the last retry
                         throw error; // Re-throw the last error
                    }
                    await new Promise(res => setTimeout(res, delay * Math.pow(2, i))); // Exponential backoff
                }
            }
             throw new Error("Image generation failed after multiple retries.");
        };

        generateBtn.addEventListener('click', async () => {
            const userPrompt = promptInput.value.trim();
            const selectedStyle = styleSelect.value;

            if (!userPrompt) {
                alert("Please describe your vision first!");
                return;
            }

            // --- UI State Update: Start Loading ---
            loader.classList.remove('hidden');
            placeholderText.classList.add('hidden');
            generatedImage.classList.add('hidden');
            errorMessage.classList.add('hidden');
            generateBtn.disabled = true;
            generateBtn.textContent = 'Generating...';
            generatedImage.src = ""; // Clear previous image

            // --- Constructing a better prompt for the AI ---
            const finalPrompt = `${userPrompt}, in the style of traditional ${selectedStyle}, intricate details, vibrant colors, folk art.`;

            try {
                const imageUrl = await generateImageWithRetry(finalPrompt);

                // --- UI State Update: Success ---
                generatedImage.src = imageUrl;
                generatedImage.classList.remove('hidden');
                generatedImage.style.opacity = '0';
                // Fade in the image for a smooth effect
                setTimeout(() => { generatedImage.style.opacity = '1'; }, 100);

            } catch (error) {
                console.error('Failed to generate image:', error);
                // --- UI State Update: Error ---
                errorMessage.textContent = "Sorry, we couldn't create the art. Please try again.";
                errorMessage.classList.remove('hidden');
            } finally {
                // --- UI State Update: End Loading ---
                loader.classList.add('hidden');
                generateBtn.disabled = false;
                generateBtn.textContent = 'Generate Art';
            }
        });
    </script>
</body>
</html>

